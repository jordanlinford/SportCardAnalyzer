import { useState, useEffect } from 'react';
import { db } from '@/lib/firebase/config';
import { doc, getDoc, collection, getDocs, query, where } from 'firebase/firestore';
import { DisplayCase } from '@/lib/firebase/displayCases';
import { Card } from '@/types/Card';

export function useDisplayCase(id: string | undefined) {
  const [displayCase, setDisplayCase] = useState<DisplayCase | null>(null);
  const [cards, setCards] = useState<Card[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchDisplayCase = async () => {
      if (!id) {
        setIsLoading(false);
        return;
      }

      try {
        console.log("Fetching display case with ID:", id);
        
        // Try to fetch from public_display_cases first (for public URLs)
        let displayCaseDoc = await getDoc(doc(db, 'public_display_cases', id));
        
        // If not found, try displayCases collection (legacy)
        if (!displayCaseDoc.exists()) {
          console.log("Not found in public_display_cases, trying displayCases collection");
          displayCaseDoc = await getDoc(doc(db, 'displayCases', id));
          
          // If still not found, try to look in users/{userId}/display_cases collections
          // This would require knowing the userId, which we may not have from a public URL
          if (!displayCaseDoc.exists()) {
            console.log("Not found in displayCases collection either, display case not found");
            setDisplayCase(null);
            setIsLoading(false);
            return;
          }
        }

        console.log("Display case found:", displayCaseDoc.id);
        const data = displayCaseDoc.data();
        console.log("Display case data:", data);
        console.log("Card IDs in display case:", data.cardIds || []);
        console.log("Card IDs type:", Array.isArray(data.cardIds) ? "array" : typeof data.cardIds);
        
        if (data.cardIds && data.cardIds.length > 0) {
          console.log("Number of card IDs:", data.cardIds.length);
          console.log("First few card IDs:", data.cardIds.slice(0, 3));
        } else if (data.cardIds && typeof data.cardIds === 'object' && !Array.isArray(data.cardIds)) {
          console.log("cardIds is an object but not an array:", data.cardIds);
        } else {
          console.log("No cardIds found or it's empty");
        }
        
        const displayCaseData: DisplayCase = {
          id: displayCaseDoc.id,
          publicId: data.publicId,
          userId: data.userId,
          name: data.name,
          description: data.description,
          background: data.background,
          isPublic: data.isPublic,
          cardIds: data.cardIds || [],
          createdAt: data.createdAt.toDate(),
          updatedAt: data.updatedAt.toDate(),
          likes: data.likes || 0,
          comments: data.comments?.map((comment: any) => ({
            ...comment,
            timestamp: comment.timestamp.toDate()
          })) || []
        };

        setDisplayCase(displayCaseData);

        // Fetch cards
        if (data.cardIds?.length > 0) {
          console.log("Fetching cards for display case, IDs:", data.cardIds);
          
          try {
            // Try a different approach: fetch cards one by one
            const cardsData: Card[] = [];
            for (const cardId of data.cardIds) {
              try {
                console.log(`Fetching individual card with ID: ${cardId}`);
                const cardDoc = await getDoc(doc(db, 'cards', cardId));
                if (cardDoc.exists()) {
                  cardsData.push({
                    id: cardDoc.id,
                    ...cardDoc.data()
                  } as Card);
                  console.log(`Found card: ${cardDoc.id}`);
                } else {
                  // Try alternative collections if card not found in main collection
                  console.log(`Card not found in 'cards' collection, trying alternative locations for: ${cardId}`);
                  let found = false;
                  
                  // Try in collection under user (if we know the userId)
                  if (data.userId) {
                    try {
                      const userCardDoc = await getDoc(doc(db, 'users', data.userId, 'collection', cardId));
                      if (userCardDoc.exists()) {
                        cardsData.push({
                          id: userCardDoc.id,
                          ...userCardDoc.data()
                        } as Card);
                        console.log(`Found card in user's collection: ${userCardDoc.id}`);
                        found = true;
                      }
                    } catch (err) {
                      console.log(`Permission error or card not found in user collection: ${err}`);
                    }
                  }
                  
                  if (!found) {
                    console.log(`Card not found: ${cardId}`);
                  }
                }
              } catch (err) {
                console.error(`Error fetching card ${cardId}:`, err);
                // If it's a permission error, log it specifically
                if (String(err).includes('permission-denied')) {
                  console.log(`Permission denied when trying to access card ${cardId}. This may be due to Firestore security rules.`);
                }
              }
            }
            
            console.log(`Found ${cardsData.length} cards out of ${data.cardIds.length} requested`);
            setCards(cardsData);
          } catch (error) {
            console.error("Error fetching cards individually:", error);
            // Try the original approach as fallback
            try {
              const cardsQuery = query(
                collection(db, 'cards'),
                where('id', 'in', data.cardIds)
              );
              const cardsSnapshot = await getDocs(cardsQuery);
              const cardsData = cardsSnapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
              })) as Card[];
              console.log(`Fallback method found ${cardsData.length} cards`);
              setCards(cardsData);
            } catch (fallbackError) {
              console.error("Fallback query also failed:", fallbackError);
            }
          }
        } else {
          console.log("No card IDs found in display case");
        }
      } catch (error) {
        console.error('Error fetching display case:', error);
        setDisplayCase(null);
      } finally {
        setIsLoading(false);
      }
    };

    fetchDisplayCase();
  }, [id]);

  return { displayCase, cards, isLoading };
} 