import { DirectFixer } from '@/components/display-cases/DirectFixer';
import { useParams } from "react-router-dom";
import { useDisplayCase } from "@/hooks/useDisplayCase";
import { ShareButton } from "@/components/ShareButton";
import LikeButton from "@/components/display/LikeButton";
import { CommentSection } from "@/components/display-cases/CommentSection";
import { Card } from "@/types/Card";
import { DisplayCaseComment } from "@/lib/firebase/displayCases";
import { MessageSellerButton } from "@/components/display/MessageSellerButton";
import { EnhancedShareButton } from "@/components/display/EnhancedShareButton";
import { DisplayCaseDebugging } from '@/components/display-cases/DisplayCaseDebugging';
import { SyncDisplayCase } from '@/components/display-cases/SyncDisplayCase';
import { CardDebugger } from '@/components/display-cases/CardDebugger';
import { useState, useEffect } from 'react';
import { ensurePublicDisplayCase } from '@/utils/displayCaseUtils';
import { Button } from "@/components/ui/button";
import { doc, getDoc, updateDoc, collection, getDocs, query, where } from 'firebase/firestore';
import { db } from "@/lib/firebase/config";
import { DisplayCaseLoading } from '@/components/display-cases/DisplayCaseLoading';

// Fallback cards to show when no real cards can be loaded
const fallbackCards: Card[] = [
  {
    id: "card1",
    playerName: "Example Player 1",
    year: "2023",
    cardSet: "Example Set",
    cardNumber: "",
    tags: ["Basketball", "2023"],
    imageUrl: "https://placehold.co/300x420/e2e8f0/1e293b?text=Card+1",
    ownerId: "system",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: "card2",
    playerName: "Example Player 2", 
    year: "2023",
    cardSet: "Example Set",
    cardNumber: "",
    tags: ["Baseball", "2023"],
    imageUrl: "https://placehold.co/300x420/e2e8f0/1e293b?text=Card+2",
    ownerId: "system",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: "card3",
    playerName: "Example Player 3",
    year: "2022",
    cardSet: "Premium Set",
    cardNumber: "",
    tags: ["Football", "2022"],
    imageUrl: "https://placehold.co/300x420/e2e8f0/1e293b?text=Card+3",
    ownerId: "system",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }
];

export default function PublicDisplayCase() {
  const { publicId } = useParams<{ publicId: string }>();
  const { displayCase, cards, isLoading } = useDisplayCase(publicId);
  const [showAdvancedTools, setShowAdvancedTools] = useState(false);
  const [reloadFlag, setReloadFlag] = useState(0);
  const [isRecovering, setIsRecovering] = useState(false);
  const [loadingFix, setLoadingFix] = useState(false);
  const [fixAttempted, setFixAttempted] = useState(false);
  const [usingFallbackCards, setUsingFallbackCards] = useState(false);

  // Auto-recovery: When the page loads and no display case is found, try to recover it
  useEffect(() => {
    if (publicId && !isLoading && !displayCase && !isRecovering) {
      setIsRecovering(true);
      console.log("Display case not found, attempting auto-recovery");
      
      ensurePublicDisplayCase(publicId)
        .then(success => {
          if (success) {
            console.log("Successfully recovered display case, reloading page");
            // Reload the page to see the recovered display case
            window.location.reload();
          } else {
            console.log("Could not recover display case");
            setIsRecovering(false);
          }
        })
        .catch(error => {
          console.error("Error during auto-recovery:", error);
          setIsRecovering(false);
        });
    }
  }, [publicId, isLoading, displayCase, isRecovering]);

  // Force a re-fetch every 3 seconds if we have no cards but have cardIds
  useEffect(() => {
    let timer: NodeJS.Timeout | null = null;
    
    if (displayCase?.cardIds?.length && cards.length === 0) {
      console.log("Display case has cardIds but no cards loaded. Setting up auto-refresh.");
      timer = setTimeout(() => {
        console.log("Auto-refreshing page to try loading cards again...");
        setReloadFlag(prev => prev + 1);
      }, 3000);
    }
    
    return () => {
      if (timer) clearTimeout(timer);
    };
  }, [displayCase, cards]);

  // Reload the page if the reloadFlag exceeds 3
  useEffect(() => {
    if (reloadFlag > 3) {
      console.log("Multiple reload attempts failed. Forcing full page reload.");
      window.location.reload();
    }
  }, [reloadFlag]);

  useEffect(() => {
    // If we have a display case but no cards, prepare to use fallback
    if (displayCase && cards.length === 0 && !fixAttempted) {
      setUsingFallbackCards(true);
    }
  }, [displayCase, cards, fixAttempted]);
  
  const fixDisplayCase = async () => {
    if (!displayCase || !publicId) return;
    
    setLoadingFix(true);
    
    try {
      // Try to update the display case with some example card IDs
      const docRef = doc(db, "public_display_cases", publicId);
      
      await updateDoc(docRef, {
        cardIds: ["card1", "card2", "card3"]
      });
      
      console.log("Display case updated with example card IDs");
      setFixAttempted(true);
      
      // Force reload the page to see the changes
      window.location.reload();
    } catch (error) {
      console.error("Failed to update display case:", error);
    } finally {
      setLoadingFix(false);
    }
  };

  const handleManualRecovery = async () => {
    if (!publicId) return;
    
    setIsRecovering(true);
    console.log("Manually triggering display case recovery");
    
    try {
      const success = await ensurePublicDisplayCase(publicId);
      if (success) {
        console.log("Successfully recovered display case, reloading page");
        window.location.reload();
      } else {
        console.log("Could not recover display case");
        setIsRecovering(false);
      }
    } catch (error) {
      console.error("Error during manual recovery:", error);
      setIsRecovering(false);
    }
  };

  // Debug output
  console.log("PublicDisplayCase rendering with publicId:", publicId);
  if (displayCase) {
    console.log("Display case found:", displayCase);
    console.log("Card IDs in display case:", displayCase.cardIds || []);
    console.log("Cards loaded:", cards.length);
  }
  
  if (isLoading || isRecovering) {
    return (
      <DisplayCaseLoading
        publicId={publicId}
        isLoading={isLoading}
        isRecovering={isRecovering}
        onManualFix={handleManualRecovery}
      />
    );
  }

  if (!displayCase) return (
    <div className="text-center mt-10 p-6 max-w-lg mx-auto bg-white rounded-xl shadow-sm">
      <h2 className="text-xl font-semibold mb-4">Display Case Not Found</h2>
      <p className="text-gray-500 mb-4">
        This display case either doesn't exist or hasn't been shared publicly.
      </p>
      {publicId && (
        <div className="mt-6 border-t pt-4">
          <h3 className="font-medium mb-2">Advanced Options</h3>
          <DirectFixer displayCaseId={publicId} />
        </div>
      )}
    </div>
  );

  // Use either real cards or fallback cards
  const displayCards = cards.length > 0 ? cards : (usingFallbackCards ? fallbackCards : []);

  return (
    <div className="p-4 space-y-6 max-w-6xl mx-auto">
      <div className="bg-white rounded-xl shadow-sm p-6">
        <div className="text-center mb-6">
          <h1 className="text-3xl font-bold mb-2">{displayCase.name}</h1>
          {displayCase.description && (
            <p className="text-gray-500 max-w-2xl mx-auto">{displayCase.description}</p>
          )}
        </div>

        <div className="flex items-center justify-between text-sm text-gray-400 mb-2">
          <span>Created: {displayCase.createdAt.toLocaleDateString()}</span>
          <span>Theme: {displayCase.background || "Default"}</span>
          <LikeButton displayCaseId={displayCase.id} />
        </div>

        <div className="mt-4 flex justify-center space-x-2">
          {displayCase?.publicId && (
            <EnhancedShareButton 
              publicId={displayCase.publicId} 
              title={displayCase.name}
            />
          )}
          {displayCase?.userId && (
            <MessageSellerButton 
              sellerId={displayCase.userId} 
              displayCaseId={displayCase.id}
              sellerName="Owner"
            />
          )}
        </div>
        
        {cards.length === 0 && !usingFallbackCards && (
          <div className="mt-4 p-3 bg-amber-50 border border-amber-200 rounded-md">
            <p className="text-amber-700 mb-2">No cards found in this display case. Would you like to add example cards?</p>
            <Button 
              onClick={fixDisplayCase} 
              variant="outline" 
              size="sm" 
              disabled={loadingFix}
            >
              {loadingFix ? "Adding cards..." : "Add Example Cards"}
            </Button>
          </div>
        )}
        
        {usingFallbackCards && (
          <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
            <p className="text-blue-700 text-sm">
              Showing example cards since no real cards could be loaded.
            </p>
          </div>
        )}
      </div>

      <div className="bg-white rounded-xl shadow-sm p-6">
        <CommentSection displayCaseId={displayCase.id} />
      </div>

      <div className="bg-white rounded-xl shadow-sm p-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Cards</h2>
          {cards.length === 0 && publicId && (
            <button 
              onClick={() => setShowAdvancedTools(!showAdvancedTools)}
              className="text-sm text-blue-500 hover:text-blue-700"
            >
              {showAdvancedTools ? "Hide Tools" : "Fix Empty Display Case"}
            </button>
          )}
        </div>
        
        {displayCards.length === 0 ? (
          <div className="text-center text-gray-400 italic mt-8">
            No cards in this display case yet.
          </div>
        ) : (
          <>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
              {displayCards.map((card: Card) => (
                <div key={card.id} className="relative group">
                  {card.imageUrl ? (
                    <>
                      <img 
                        src={card.imageUrl} 
                        alt={`${card.playerName} ${card.year} ${card.cardSet}`}
                        className="rounded-xl w-full shadow-md aspect-[2/3] object-cover"
                      />
                      <div className="absolute inset-0 bg-black bg-opacity-70 opacity-0 group-hover:opacity-100 transition-all duration-200 flex items-center justify-center text-white text-sm rounded-xl p-2">
                        <div className="text-center">
                          <div className="font-semibold">{card.playerName}</div>
                          <div className="text-xs">{card.year} {card.cardSet}</div>
                          {card.price && (
                            <div className="text-xs mt-1">${card.price.toLocaleString()}</div>
                          )}
                        </div>
                      </div>
                    </>
                  ) : (
                    <div className="rounded-xl w-full shadow-md aspect-[2/3] bg-gray-100 flex items-center justify-center">
                      <div className="text-center p-4">
                        <div className="font-semibold">{card.playerName}</div>
                        <div className="text-xs text-gray-600">
                          {card.year} {card.cardSet}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
            <div className="block md:hidden text-xs text-gray-400 mt-2 text-center">
              Tap cards to view details
            </div>
          </>
        )}
      </div>

      {displayCase.comments && displayCase.comments.length > 0 && (
        <div className="bg-white rounded-xl shadow-sm p-6">
          <h2 className="text-xl font-semibold mb-4">Comments</h2>
          <div className="space-y-4">
            {displayCase.comments.map((comment: DisplayCaseComment, index: number) => (
              <div key={index} className="bg-gray-50 p-4 rounded-lg">
                <p className="text-gray-700">{comment.text}</p>
                <p className="text-sm text-gray-500 mt-2">
                  {comment.timestamp.toLocaleDateString()}
                </p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
} 