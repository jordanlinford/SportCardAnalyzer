import { useParams, useNavigate } from "react-router-dom";
import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import { doc, getDoc, deleteDoc } from "firebase/firestore";
import { db } from "@/lib/firebase/config";
import { DisplayCase } from "@/types/display-case";
import { toast } from "sonner";
import DisplayCaseDetail from "@/components/display-cases/DisplayCaseDetail";
import { EditDisplayCaseModal } from "@/components/display-cases/EditDisplayCaseModal";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

export default function DisplayCasePage() {
  const { id } = useParams<{ id: string }>();
  const { user } = useAuth();
  const navigate = useNavigate();
  
  const [displayCase, setDisplayCase] = useState<DisplayCase | null>(null);
  const [loading, setLoading] = useState(true);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  
  useEffect(() => {
    async function fetchDisplayCase() {
      if (!id || !user) return;
      
      setLoading(true);
      
      try {
        const displayCaseRef = doc(db, "users", user.uid, "display_cases", id);
        const snapshot = await getDoc(displayCaseRef);
        
        if (snapshot.exists()) {
          setDisplayCase({
            id: snapshot.id,
            ...snapshot.data()
          } as DisplayCase);
        } else {
          toast.error("Display case not found");
        }
      } catch (error) {
        console.error("Error fetching display case:", error);
        toast.error("Failed to load display case");
      } finally {
        setLoading(false);
      }
    }
    
    fetchDisplayCase();
  }, [id, user]);
  
  const handleDeleteDisplayCase = async () => {
    if (!id || !user?.uid) return;
    
    setIsDeleting(true);
    
    try {
      const displayCaseRef = doc(db, "users", user.uid, "display_cases", id);
      await deleteDoc(displayCaseRef);
      
      toast.success("Display case deleted successfully");
      navigate("/display-cases");
    } catch (error) {
      console.error("Error deleting display case:", error);
      toast.error("Failed to delete display case");
    } finally {
      setIsDeleting(false);
      setIsDeleteDialogOpen(false);
    }
  };
  
  // Check if the user is the owner of the display case
  const isOwner = user && displayCase ? user.uid === displayCase.userId : false;
  
  return (
    <div className="min-h-screen">
      {loading ? (
        <div className="p-8 flex justify-center">
          <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
        </div>
      ) : (
        <>
          {/* Controls for editing/deleting if user is owner */}
          {isOwner && displayCase && (
            <div className="bg-white border-b">
              <div className="max-w-6xl mx-auto px-4 py-3 flex justify-end gap-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => setIsEditModalOpen(true)}
                >
                  Edit Display Case
                </Button>
                
                <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
                  <DialogTrigger asChild>
                    <Button 
                      variant="destructive" 
                      size="sm"
                    >
                      Delete
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Are you sure?</DialogTitle>
                      <DialogDescription>
                        This will permanently delete your display case "{displayCase.name}".
                        This action cannot be undone.
                      </DialogDescription>
                    </DialogHeader>
                    <DialogFooter>
                      <Button 
                        variant="outline" 
                        onClick={() => setIsDeleteDialogOpen(false)}
                        disabled={isDeleting}
                      >
                        Cancel
                      </Button>
                      <Button 
                        variant="destructive"
                        onClick={handleDeleteDisplayCase}
                        disabled={isDeleting}
                      >
                        {isDeleting ? "Deleting..." : "Delete"}
                      </Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </div>
            </div>
          )}
          
          {/* Display the detail component */}
          <DisplayCaseDetail />
          
          {/* Edit modal */}
          {isEditModalOpen && displayCase && (
            <EditDisplayCaseModal
              isOpen={isEditModalOpen}
              onClose={() => setIsEditModalOpen(false)}
              displayCase={displayCase}
            />
          )}
        </>
      )}
    </div>
  );
} 